<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="26">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">D]H=@2nldAU:MM2b.}cxWeIh0Gi32eO*FuxWMuP5%{mcIVgA6t9Fkwa6vP@ynNpI$=7,z9n3I!V=oyOr.Fg)[TFlAim^X9E:#-P1m%[;6SXz:FoLQC1$=lw3P=DLS#_Ac)!zDjCJ2/l;m6L%100</UDF1>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"all links 100%"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
"ps_game.exe"+6E733:
db 90 90 90 90 90
mov esi,#100 // % link
 
[DISABLE]
"ps_game.exe"+6E733:
cmp esi,32
jle ps_game.exe+6E73D
mov esi,00000032
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"based on lapis type id"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem2,500)
alloc(typeid,4)
label(returnhere2)
label(exit2)

newmem2:
movzx ebx,byte ptr [eax+41]
mov [typeid],ebx
mov eax,edi

exit2:
jmp returnhere2

"ps_game.exe"+6CB01:
jmp newmem2
nop
returnhere2:

alloc(newmem,500)
label(returnhere)
label(originalcode)
label(exit)
label(link100)

newmem:
cmp byte ptr [typeid],#124 // typeid = 124 == 100% link
je link100
cmp byte ptr [typeid],#65 // typeid &lt; 65 == 100% link
jle link100

originalcode:
cmp esi,32
jle ps_game.exe+6E73D
jmp exit

link100:
mov esi,64
jmp ps_game.exe+6E73D

exit:
jmp returnhere

"ps_game.exe"+6E733:
jmp newmem
returnhere:
 
[DISABLE]
dealloc(newmem2)
"ps_game.exe"+6CB01:
movzx ebx,byte ptr [eax+41]
mov eax,edi

dealloc(newmem)
"ps_game.exe"+6E733:
cmp esi,32
jle ps_game.exe+6E73D
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"New mounts"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"New mount"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(original)
//label(continue)
label(poporiginal)
label(exit)
alloc(fix_mount,10)

newmem:
cmp [ecx+0D*4+1C0],00
je original

push eax
// get type
mov eax,[ecx+0D*4+1C0]
movzx eax, byte ptr [eax+40]
// check type
cmp al,#42
jne poporiginal
// get typeid
mov eax,[ecx+0D*4+1C0]
movzx eax, byte ptr [eax+41]
// check typeid
cmp al,#98
jbe poporiginal

// opcode
mov eax,[esp+04]
mov [fix_mount],eax
mov eax,[esp+08]
mov [fix_mount+04],eax

// get mount id
mov eax,[ecx+0D*4+1C0]
movzx eax, byte ptr [eax+40]
mov [fix_mount+07],eax
mov eax,[ecx+0D*4+1C0]
movzx eax, byte ptr [eax+41]
mov [fix_mount+0B],eax
pop eax

// continue:
push #15
lea edx,[fix_mount]

exit:
jmp returnhere

original:
push 07
lea edx,[esp+04]
jmp exit

poporiginal:
pop eax
jmp original

"ps_game.exe"+91490:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(fix_mount)
dealloc(newmem)
"ps_game.exe"+91490:
push 07
lea edx,[esp+04]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"New mount (around)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(continue)
label(exit)
alloc(fix_mount,10)

newmem:
push eax

mov eax,[esp+18]
mov [fix_mount],eax
mov eax,[esp+1C]
mov [fix_mount+04],eax

cmp [esi+0D*4+1C0],00
je no_mount

mov eax,[esi+0D*4+1C0]
movzx eax, byte ptr [eax+40]
mov [fix_mount+07],eax
mov eax,[esi+0D*4+1C0]
movzx eax, byte ptr [eax+41]
mov [fix_mount+0B],eax

continue:
pop eax
mov [fix_mount+06],al

originalcode:
push #15
lea edx,[fix_mount]

exit:
jmp returnhere

no_mount:
mov [fix_mount+07],00000000
mov [fix_mount+0B],00000000
jmp continue

"ps_game.exe"+2A56C:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(fix_mount)
"ps_game.exe"+2A56C:
push 07
lea edx,[esp+18]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"New mount (town)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
alloc(fix_mount,10)

newmem:
push eax

cmp byte ptr [esp+3C],1D
jne poporiginal

mov eax,[esp+3C]
mov [fix_mount],eax
mov eax,[esp+40]
mov [fix_mount+04],eax

cmp [edi+0D*4+1C0],00
je no_mount

mov eax,[edi+0D*4+1C0]
movzx eax, byte ptr [eax+40]
mov [fix_mount+07],eax
mov eax,[edi+0D*4+1C0]
movzx eax, byte ptr [eax+41]
mov [fix_mount+0B],eax

continue:
pop eax
mov [fix_mount+06],al

originalcode:
lea ecx,[fix_mount]
push #15

exit:
jmp returnhere

original:
lea ecx,[esp+38]
push 07
jmp exit

poporiginal:
pop eax
jmp original

no_mount:
mov [fix_mount+07],00000000
mov [fix_mount+0B],00000000
jmp continue

"ps_game.exe"+263AD:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(fix_mount)
"ps_game.exe"+263AD:
lea ecx,[esp+38]
push 07
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"GM ability to attack both factions"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
cmp byte ptr [eax+5808],#10
jb 00457E35
cmp dl,[eax+0000012D]

exit:
jmp returnhere

"ps_game.exe"+57E2D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"ps_game.exe"+57E2D:
cmp dl,[eax+0000012D]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Capital Recall Rune"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// Capital Spawn Points

// Light
0056E608:
dd #35 // MapID

dd (float)665.981 // X
dd (float)26.940 // Y
dd (float)281.116 // Z

// Fury
0056E618:
dd #36 // MapID

dd (float)396.457 // X
dd (float)42.740 // Y
dd (float)442.555 // Z

[DISABLE]

0056E608:
dd 00000023

dd 441277AE
dd 41D80000
dd 43607D71

0056E618:
dd 00000024

dd 44094666
dd 42280000
dd 43A2B70A

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Auction House Recall Rune"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// Light Auction House Spawn Points

// Light
0056E628:
dd #42 // MapID

dd (float)50.0 // X
dd (float)2.0 // Y
dd (float)50.0 // Z

// Fury
0056E638:
dd #42 // MapID

dd (float)50.0 // X
dd (float)2.0 // Y
dd (float)50.0 // Z

[DISABLE]

0056E628:
dd 0000002A

dd 429D3852
dd 4175C28F
dd 41DF999A

0056E638:
dd 0000002A

dd 41BB1EB8
dd 4175C28F
dd 42D4CCCD
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Arena Recall Rune"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// Arena Spawn Points

// Light
0056E648:
dd #40 // MapID

dd (float)0.0 // X
dd (float)0.0 // Y
dd (float)0.0 // Z

// Fury
0056E658:
dd #40 // MapID

dd (float)0.0 // X
dd (float)0.0 // Y
dd (float)0.0 // Z

[DISABLE]

0056E648:
dd 00000028

dd 43000000
dd 40600000
dd 42A40000

0056E658:
dd 00000028

dd 42680000
dd 46600000
dd 42A40000

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"Guild House Recall Rune"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// Guild House Spawn Points

// Light
0056E688:
dd #51 // MapID

dd (float)490 // X
dd (float)43 // Y
dd (float)330 // Z

// Fury
0056E698:
dd #52 // MapID

dd (float)490 // X
dd (float)43 // Y
dd (float)330 // Z

[DISABLE]

0056E688:
dd 00000033

dd 43F5BEB8
dd 42275C29
dd 43A3251F

0056E698:
dd 00000034

dd 43F12F5C
dd 42275C29
dd 43A0F47B

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"skill points per level"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
inc eax
mov edx,#17 // points per level
mul edx
mov [esi+0000013A],ax

exit:
jmp returnhere

"ps_game.exe"+8FCC8:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8FCC8:
lea edx,[eax+eax*4+05]
mov [esi+0000013A],dx
//Alt: db 8D 54 80 05 66 89 96 3A 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"Cross Trade AH v2"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
nop

exit:
jmp returnhere

"ps_game.exe"+7D9B6:
jmp newmem
nop
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+7D9B6:
jne ps_game.exe+7E0DA
//Alt: db 0F 85 1E 07 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>28</ID>
      <Description>"Cross Trade Chat"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode2:
nop

exit2:
jmp returnhere2

"ps_game.exe"+2793E:
jmp newmem2
nop
returnhere2:

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
nop
nop

exit:
jmp returnhere

"ps_game.exe"+27934:
jmp newmem
nop
nop
nop
nop
nop
returnhere:





[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
"ps_game.exe"+2793E:
jne ps_game.exe+279CE
//Alt: db 0F 85 8A 00 00 00
dealloc(newmem)
"ps_game.exe"+27934:
mov dl,[esp+14]
cmp dl,[ecx+0000012D]
//Alt: db 8A 54 24 14 3A 91 2D 01 00 00

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Stat Point HM"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
add word ptr [esi+00000138],0A // change 07 to something else

exit:
jmp returnhere

"ps_game.exe"+9B46B:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+9B46B:
add word ptr [esi+00000138],07
//Alt: db 66 83 86 38 01 00 00 07
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>29</ID>
      <Description>"Stat Point Rune HM"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
imul esi,ecx,0A
nop
nop
nop
nop

exit:
jmp returnhere

"ps_game.exe"+8F967:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8F967:
lea esi,[ecx*8+00000000]
//Alt: db 8D 34 CD 00 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"Level Max 80 StatusDefs/ExpDefs"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
004651D9:
cmp ax,50
jae ps_game.exe+6522B
0046507D:
cmp ax,50
jae ps_game.exe+65222
0046143E:
cmp eax,50
jg ps_game.exe+6145A
00480FC4:
cmp ebx,50
jnge 00480FB3
0049B5DE:
cmp ebx,50
jg 0049B5FB
0049B63A:
cmp ebx,50
jg 0049B657
0049B68E:
cmp ebx,50
jg 0049B6AB
0049B7C2:
cmp ebx,50
jg 0049B7DF
0049B81E:
cmp ebx,50
jg 0049B83B
0049B872:
cmp ebx,50
jg 0049B88F
0049BD9E:
cmp ebx,50
jg 0049BDB7
0049BDCF:
cmp ebx,50
jg 0049BDE8
0049BE00:
cmp ebx,50
jg 0049BE19
0049BEDB:
cmp ebx,50
jg 0049BEF8
00460C55:
cmp ecx,50
jg 00460C6B
00460C85:
cmp ecx,50
jg 00460C9B
00460CB5:
cmp ecx,50
jg 00460CCB
0046135B:
cmp ecx,50
jg 00461382
004613AC:
cmp ecx,50
jg 004613C9
004613F9:
cmp ecx,50
jg 00461416
00464FF5:
cmp ecx,50
jg 00465007
0046515F:
cmp ecx,50
jg 00465172
004651EA:
cmp ecx,50
jg 004651FD
0046523F:
cmp ecx,50
jg 00465252
00467BFC:
cmp ecx,50
jg 00467C11
004612CC:
cmp edx,50
jg 004612E5
004612F7:
cmp edx,50
jg 00461310
00461322:
cmp edx,50
jg 0046133C
0049241B:
cmp edx,50
jg 00492430
00547019:
cmp eax,50
jl 00547125
0049BF34:
cmp ebx,50
jg 0049BF51
0049BF81:
cmp ebx,50
jg 0049BF9E
0049BFD1:
cmp ebx,50
jg 0049BFEE
0049C013:
cmp ebx,50
jg 0049C030
0049C052:
cmp ebx,50
jg 0049C084
0049C0B4:
cmp ebx,50
jg 0049C0D1
0049C10D:
cmp ebx,50
jg 0049C12A
0049C15A:
cmp ebx,50
jg 0049C177
0049C1AA:
cmp ebx,50
jg 0049C1C7
0049C1EC:
cmp ebx,50
jg 0049C209
0049C22B:
cmp ebx,50
jg 0049C246
00480E0C:
cmp ecx,50
ja 00480D96
0049243B:
cmp ecx,50
jg 0049244E
0049B4A2:
cmp ecx,50
jg 0049B4BB
0049B4D3:
cmp ecx,50
jg 0049B4EC
0049B504:
cmp ecx,50
jg 0049B51D
0049BB75:
cmp ecx,50
jg 0049BB8A
0049BB9C:
cmp ecx,50
jg 0049BBAF


[DISABLE]
004651D9:
cmp ax,46
jae ps_game.exe+6522B
0046507D:
cmp ax,46
jae ps_game.exe+65222
0046143E:
cmp eax,46
jg ps_game.exe+6145A
00480FC4:
cmp ebx,46
jnge 00480FB3
0049B5DE:
cmp ebx,46
jg 0049B5FB
0049B63A:
cmp ebx,46
jg 0049B657
0049B68E:
cmp ebx,46
jg 0049B6AB
0049B7C2:
cmp ebx,46
jg 0049B7DF
0049B81E:
cmp ebx,46
jg 0049B83B
0049B872:
cmp ebx,46
jg 0049B88F
0049BD9E:
cmp ebx,46
jg 0049BDB7
0049BDCF:
cmp ebx,46
jg 0049BDE8
0049BE00:
cmp ebx,46
jg 0049BE19
0049BEDB:
cmp ebx,46
jg 0049BEF8
00460C55:
cmp ecx,46
jg 00460C6B
00460C85:
cmp ecx,46
jg 00460C9B
00460CB5:
cmp ecx,46
jg 00460CCB
0046135B:
cmp ecx,46
jg 00461382
004613AC:
cmp ecx,46
jg 004613C9
004613F9:
cmp ecx,46
jg 00461416
00464FF5:
cmp ecx,46
jg 00465007
0046515F:
cmp ecx,46
jg 00465172
004651EA:
cmp ecx,46
jg 004651FD
0046523F:
cmp ecx,46
jg 00465252
00467BFC:
cmp ecx,46
jg 00467C11
004612CC:
cmp edx,46
jg 004612E5
004612F7:
cmp edx,46
jg 00461310
00461322:
cmp edx,46
jg 0046133C
0049241B:
cmp edx,46
jg 00492430
00547019:
cmp eax,46
jl 00547125
0049BF34:
cmp ebx,46
jg 0049BF51
0049BF81:
cmp ebx,46
jg 0049BF9E
0049BFD1:
cmp ebx,46
jg 0049BFEE
0049C013:
cmp ebx,46
jg 0049C030
0049C052:
cmp ebx,46
jg 0049C084
0049C0B4:
cmp ebx,46
jg 0049C0D1
0049C10D:
cmp ebx,46
jg 0049C12A
0049C15A:
cmp ebx,46
jg 0049C177
0049C1AA:
cmp ebx,46
jg 0049C1C7
0049C1EC:
cmp ebx,46
jg 0049C209
0049C22B:
cmp ebx,46
jg 0049C246
00480E0C:
cmp ecx,46
ja 00480D96
0049243B:
cmp ecx,46
jg 0049244E
0049B4A2:
cmp ecx,46
jg 0049B4BB
0049B4D3:
cmp ecx,46
jg 0049B4EC
0049B504:
cmp ecx,46
jg 0049B51D
0049BB75:
cmp ecx,46
jg 0049BB8A
0049BB9C:
cmp ecx,46
jg 0049BBAF
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Shen's script"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>19</ID>
          <Description>"Cross Faction Inspect"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
00477d49:
db 90 90 90 90 90 90



[DISABLE]
00477d49:
db 0F 85 F9 02 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>21</ID>
          <Description>"Cross Faction Whisper"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
0047f629:
db 90 90 90 90 90 90

0047ff69:
db 90 90 90 90 90 90


[DISABLE]
0047f629:
db 0F 85 DF 00 00 00

0047ff69:
db 0F 85 DF 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"Union Summon Raid"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(ItemSummonRaid)
label(checkcountry)
label(failed)
label(exit)

newmem:
call ps_game.exe+4ECF0
//esi=target player,edi=source player
//check map
originalcode:
pushad
movzx eax,word ptr [esi+0x160]
movzx ebx,word ptr [edi+0x160]
cmp eax,(int)45
je checkcountry
cmp ebx,(int)45
je checkcountry

jmp ItemSummonRaid

//checkcountry and check if same map
checkcountry:
cmp eax,ebx        //if they are in the same map which we speicifys
je ItemSummonRaid

movzx eax,byte ptr [esi+0x12d]
movzx ebx,byte ptr [edi+0x12d]
cmp eax,ebx
jne failed

/*
push eax               //party table
push ecx               //leader id
mov eax,[edi+17f4]
mov ecx,[eax+0c]       //leader id
imul ecx,ecx,8
add  ecx,18
mov  ecx,[eax+ecx]   //leader address
cmp edi,ecx          //compare address check is leader
pop ecx
pop eax
je 0049e4ea        //if yes
*/

ItemSummonRaid:

mov eax,dword ptr ds:[edi+0x58FC]
mov ecx,dword ptr ds:[edi+0x5900]
lea eax,dword ptr ds:[eax+eax*2]     // eax=bag,ecx=slot
lea edx,dword ptr ds:[ecx+eax*8]
imul edx,edx,4
mov eax,dword ptr ds:[edi+edx+0x1C0]
mov eax,dword ptr ds:[eax+30]
cmp [eax],(int)100045                 //orginal item id
popad
jne 0049e4ea   //success addr
/*
mov eax,dword ptr ds:[eax+0x30]
cmp byte ptr ds:[eax+0x46],0x1F
*/



exit:
jmp returnhere

failed:
popad
jmp 0049E517



"ps_game.exe"+9E4E1:

jmp newmem

returnhere:

[DISABLE]

//code from here till the end of the code will be used to disable the cheat

dealloc(newmem)

"ps_game.exe"+9E4E1:

call ps_game.exe+4ECF0

//Alt: db E8 0A 08 FB FF
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"UseingItemUnlessGotXXXkill"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2048 enough dont change
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [ebx+0x40],(int)100 //item type
jne originalcode
cmp byte ptr [ebx+0x41],(int)206   //item id
jne originalcode

cmp dword ptr [ebp+148],0x32  //kills: plz use hex format
jl ps_game.exe+7469F






originalcode:
cmp byte ptr ds:[ebx+0x42],0x0
je ps_game.exe+7469F

exit:
jmp returnhere

"ps_game.exe"+72E1A:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+72E1A:
je ps_game.exe+7469F
//Alt: db 0F 84 7F 18 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Free For All"</Description>
          <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>18</ID>
              <Description>"FFA and level attack"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(AttackIllegal)
label(AttackLegal)
label(originalcode)
label(exit)

newmem:
push ebx
movzx esi byte ptr [edx+136]
movzx ebx,byte ptr [eax+136]
cmp esi,ebx                    //level equal
pop ebx
jne AttackIllegal

cmp byte ptr [edx+160],(int)60  //map id
jne originalcode


AttackLegal:
jmp 00457e35



AttackIllegal:                //eax=main
mov byte ptr [eax+1544],0
jmp 00457e39

originalcode:
mov dl,[edx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+57E27:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+57E27:
mov dl,[edx+0000012D]
//Alt: db 8A 92 2D 01 00 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>32</ID>
              <Description>"MoveOutOfSpecialMap"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp dword ptr [esi+0x17f4],0          //check party
je originalcode

cmp byte ptr [esi+0x160],(int)60     //special map id
jne originalcode

cmp word ptr [esi+0x160],ax          //if map didnt change
je originalcode

pushad                              //exit party
mov eax,esi
mov ecx,[eax+0x17f4]
call 0044F5F0
popad

originalcode:
mov [esi+00000160],ax

exit:
jmp returnhere

"ps_game.exe"+148E0:
jmp newmem
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+148E0:
mov [esi+00000160],ax
//Alt: db 66 89 86 60 01 00 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>22</ID>
              <Description>"UseMoveRuneInSpecialMap"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(CheckCountry)
label(exit)

newmem:
pushad
movzx ebx,byte ptr [ebp+0x160]

cmp eax,(int)60                //target mapid
je CheckCountry
cmp ebx,(int)60                //src mapid
je CheckCountry

jmp originalcode


CheckCountry:
cmp ebx,eax                     //we allow same map
je originalcode

movzx ebx,byte ptr [ebp+0x12d]  //we allow same country
movzx ecx,byte ptr [esi+0x12d]
cmp ebx,ecx
je originalcode

popad
jmp 00473576           //wrong addr


originalcode:
popad
call ps_game.exe+72880

exit:
jmp returnhere

"ps_game.exe"+734FC:
jmp newmem
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+734FC:
call ps_game.exe+72880
//Alt: db E8 7F F3 FF FF
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>37</ID>
      <Description>"Perfect lapisia depending on TypeID"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Credits to Eric-Dutra16
[ENABLE]
alloc(newmem2,2048)
alloc(typeid,4)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
push eax
mov eax,[edx+41]
mov [typeid],eax
pop eax

originalcode2:
cmp byte ptr [edx+40],5F
jne ps_game.exe+6CAB7

exit2:
jmp returnhere2

"ps_game.exe"+6C9FE:
jmp newmem2
nop
nop
nop
nop
nop
returnhere2:

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [typeid],(int)2 // typeid perfect lapisia
je 0046CD83
cmp byte ptr [typeid],(int)7 // typeid perfect lapisia
je 0046CD83

originalcode:
cmp esi,eax
jae ps_game.exe+6D11C

exit:
jmp returnhere

"ps_game.exe"+6CD7B:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
dealloc(typeid)
dealloc(newmem2)
"ps_game.exe"+6C9FE:
cmp byte ptr [edx+40],5F
jne ps_game.exe+6CAB7

dealloc(newmem)
"ps_game.exe"+6CD7B:
cmp esi,eax
jae ps_game.exe+6D11C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>39</ID>
      <Description>"Perfect lapisia 0 &gt; [20]"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Credits to Eric-Dutra16
[ENABLE]
"ps_game.exe"+6CD97:
mov al,#20

"ps_game.exe"+6CD7D:
db 90 90 90 90 90 90

[DISABLE]
"ps_game.exe"+6CD97:
inc al

"ps_game.exe"+6CD7D:
jae "ps_game.exe"+6D11C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>40</ID>
      <Description>"Fix drop of helmets and capes"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Credits to Eric-Dutra16 and andr3y_you96
[ENABLE]
004BAFC8:
db 90 90 90 90 90 90 90 90 90

004BAFD1:
db 90 90 90 90 90 90 90 90 90

00473BBD:
db 90 90 90 90 90 90 90 90 90 90 90 90 90

[DISABLE]
004BAFC8:
cmp eax,10
je 004BB47A

004BAFD1:
cmp eax,18
je 004BB47A

00473BBD:
cmp dword ptr [eax+000000A0],18
je 0047468A
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>41</ID>
      <Description>"Rem Exp (map 18 and 30)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp word ptr [esi+160],#6
je 00465222
cmp word ptr [esi+160],#8
je 00465222
cmp word ptr [esi+160],#18
je 00465222
cmp word ptr [esi+160],#30
je 00465222
cmp word ptr [esi+160],#31
je 00465222
cmp word ptr [esi+160],#32
je 00465222
cmp word ptr [esi+160],#50
je 00465222

originalcode:
cmp ax,50
jae ps_game.exe+65222

exit:
jmp returnhere

"ps_game.exe"+6507D:
jmp newmem
nop
nop
nop
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
"ps_game.exe"+6507D:
cmp ax,50
jae ps_game.exe+65222
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>42</ID>
      <Description>"Party Self"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

alloc(newmem1,2048)
label(returnhere1)
label(originalcode1)
label(exit1)
newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ebp+18],ecx
je 0044F557
originalcode:
cmp dword ptr [ebp+10],07
mov [esp+20],ebx
jl ps_game.exe+4F246

exit:
jmp returnhere

"ps_game.exe"+4F239:
jmp newmem
nop
returnhere:


"ps_game.exe"+754E2:
nop
nop
nop
nop
nop
nop
nop
nop
 newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,01
cmp [esi+10],eax
jle 0044EC8C
originalcode1:
xor eax,eax
cmp [esi+10],eax

exit1:
jmp returnhere1

"ps_game.exe"+4EC70:
jmp newmem1
returnhere1:
[DISABLE]
"ps_game.exe"+4F239:
mov [esp+20],ebx
jl ps_game.exe+4F246

"ps_game.exe"+754E2:
cmp ebx,[ebp+000000DC]
je ps_game.exe+75505

"ps_game.exe"+4EC70:
xor eax,eax
cmp [esi+10],eax
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>43</ID>
      <Description>"trade exploit fix"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
call ps_game.exe+ED0E0

push 04
lea eax,[esp+18]
push eax
mov ecx,ebx
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],01
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,ebx
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],02
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,esi
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],01
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,esi
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],02
mov byte ptr [esp+1F],00
call 004ED0E0

exit:
jmp returnhere

"ps_game.exe"+7E007:
jmp newmem
returnhere:
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+7E007:
call ps_game.exe+ED0E0
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>44</ID>
      <Description>"Both Faction FFA"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp word ptr [edi+160],(int)60 /// Map ID of your FFA Map
je 004757D8
originalcode:
cmp dl,[edi+0000012D]

exit:
jmp returnhere

"ps_game.exe"+757C0:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+757C0:
cmp dl,[edi+0000012D]
//Alt: db 3A 97 2D 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>45</ID>
      <Description>"Max Recrune 1"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
registersymbol(rune)
registersymbol(gecici)
registersymbol(itemname)
registersymbol(counter16)
registersymbol(strpointer)
registersymbol(dexpointer)
registersymbol(recpointer)
registersymbol(intpointer)
registersymbol(wispointer)
registersymbol(lucpointer)
registersymbol(hppointer)
registersymbol(mppointer)
registersymbol(sppointer)
alloc(counter16,4)
alloc(gecici,4)
alloc(itemname,4)
alloc(strpointer,4)
alloc(dexpointer,4)
alloc(recpointer,4)
alloc(intpointer,4)
alloc(wispointer,4)
alloc(lucpointer,4)
alloc(hppointer,4)
alloc(mppointer,4)
alloc(sppointer,4)
alloc(rune,4)
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(dexxx)
label(reccc)
label(inttt)
label(wisss)
label(luccc)
label(hppp)
label(mppp)
label(sppp)
label(removalrune)

newmem: //this is allocated memory, you have read,write,execute access
mov esi,[ebp+30]
mov esi,[esi]
mov [itemname],esi
mov esi,0
mov [strpointer],0
mov [dexpointer],0
mov [recpointer],0
mov [intpointer],0
mov [wispointer],0
mov [lucpointer],0
mov [hppointer],0
mov [sppointer],0
mov [mppointer],0
mov [counter16],0
cmp byte ptr [ebp+84],00
JE dexxx
add [counter16],1
mov [strpointer],1

dexxx:
cmp byte ptr [ebp+86],00
JE reccc
add [counter16],1
mov [dexpointer],1

reccc:
cmp byte ptr [ebp+88],00
JE inttt
add [counter16],1
mov [recpointer],1

inttt:
cmp byte ptr [ebp+8A],00
JE wisss
add [counter16],1
mov [intpointer],1

wisss:
cmp byte ptr [ebp+8C],00
JE luccc
add [counter16],1
mov [wispointer],1

luccc:
cmp byte ptr [ebp+8E],00
JE hppp
add [counter16],1
mov [lucpointer],1

hppp:
cmp byte ptr [ebp+90],00
JE mppp
add [counter16],1
mov [hppointer],1

mppp:
cmp byte ptr [ebp+92],00
JE sppp
add [counter16],1
mov [mppointer],1

sppp:
cmp byte ptr [ebp+94],00
JE originalcode
add [counter16],1
mov [sppointer],1


originalcode:
mov dl,[ecx]
mov [rune],dl

//Check
cmp [rune], (int)75 //StdRune
je removalrune
cmp [rune], (int)155 //StdRune
je removalrune
cmp [rune], (int)106 //Str
je CheckStrRune
CheckDexPointer:
cmp [rune], (int)107 //Dex
je CheckDexRune
CheckRecPointer:
cmp [rune], (int)108 // Rec
je CheckRecRune
CheckIntPointer:
cmp [rune], (int)109 // Int
je CheckIntRune
CheckWisPointer:
cmp [rune], (int)110 // Wis
je CheckWisRune
CheckLucPointer:
cmp [rune], (int)111 // Luc
je CheckLucRune
CheckHPPointer:
cmp [rune], (int)112 // HP
je CheckHPRune
CheckMPPointer:
cmp [rune], (int)113 // MP
je CheckMPRune
CheckSPPointer:
cmp [rune], (int)114 //SP
je CheckSPRune
SPPointerLast:
cmp [rune],(int)115
JE removalrune
cmp [rune],(int)116
JE removalrune
cmp [rune],(int)117
JE removalrune
cmp [rune],(int)118
JE removalrune
cmp [rune],(int)119
JE removalrune
cmp [rune],(int)120
JE removalrune
cmp [rune],(int)121
JE removalrune
cmp [rune],(int)122
JE removalrune
cmp [rune],(int)123
JE removalrune
// Perfect Runes
cmp [rune], (int)137 //Str
je CheckStrRunePerf
CheckDexPointerPerf:
cmp [rune], (int)138 //Dex
je CheckDexRunePerf
CheckRecPointerPerf:
cmp [rune], (int)139 // Rec
je CheckRecRunePerf
CheckIntPointerPerf:
cmp [rune], (int)140 // Int
je CheckIntRunePerf
CheckWisPointerPerf:
cmp [rune], (int)141 // Wis
je CheckWisRunePerf
CheckLucPointerPerf:
cmp [rune], (int)142 // Luc
je CheckLucRunePerf
CheckHPPointerPerf:
cmp [rune], (int)143 // HP
je CheckHPRunePerf
CheckMPPointerPerf:
cmp [rune], (int)144 // MP
je CheckMPRunePerf
CheckSPPointerPerf:
cmp [rune], (int)145 //SP
je CheckSPRunePerf
SPPointerLastPerf:
jmp ps_game.exe+6D901
removalrune:
cmp byte ptr [ecx+46],3E
jne ps_game.exe+6D901

exit:
jmp returnhere

CheckStrRune:
cmp [strpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckDexPointer
CheckDexRune:
cmp [dexpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckRecPointer
CheckRecRune:
cmp [recpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckIntPointer
CheckIntRune:
cmp [intpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckWisPointer
CheckWisRune:
cmp [wispointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckLucPointer
CheckLucRune:
cmp [lucpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckHPPointer
CheckHPRune:
cmp [hppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckMPPointer
CheckMPRune:
cmp [mppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckSPPointer
CheckSPRune:
cmp [sppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp SPPointerLast
// PerfectRunes
CheckStrRunePerf:
cmp [strpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckDexPointerPerf
CheckDexRunePerf:
cmp [dexpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckRecPointerPerf
CheckRecRunePerf:
cmp [recpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckIntPointerPerf
CheckIntRunePerf:
cmp [intpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckWisPointerPerf
CheckWisRunePerf:
cmp [wispointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckLucPointerPerf
CheckLucRunePerf:
cmp [lucpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckHPPointerPerf
CheckHPRunePerf:
cmp [hppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckMPPointerPerf
CheckMPRunePerf:
cmp [mppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckSPPointerPerf
CheckSPRunePerf:
cmp [sppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp SPPointerLastPerf

"ps_game.exe"+6D6A9:
jmp newmem
nop
nop
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6D6A9:
cmp byte ptr [ecx+46],3E
jne ps_game.exe+6D901
//Alt: db 80 79 46 3E 0F 85 4E 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>46</ID>
      <Description>"Max rec Rune 2"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
registersymbol(ecxpointer)
registersymbol(orangecount)
alloc(orangecount,4)
alloc(ecxpointer,4)
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(equality)
label(reroll)
label(gmcheck)
label(end)
label(backend)
label(hpcheck)
label(mpcheck)
label(spcheck)
label(strreroll)
label(dexreroll)
label(recreroll)
label(intreroll)
label(wisreroll)
label(lucreroll)
label(hpreroll)
label(mpreroll)
label(spreroll)
label(strrerollr)
label(dexrerollr)
label(recrerollr)
label(intrerollr)
label(wisrerollr)
label(lucrerollr)
label(hprerollr)
label(mprerollr)
label(sprerollr)
label(strrerollequality)
label(dexrerollequality)
label(recrerollequality)
label(intrerollequality)
label(wisrerollequality)
label(lucrerollequality)
label(hprerollequality)
label(mprerollequality)
label(sprerollequality)
label(rerollremoval)
label(strrerollremoval)
label(dexrerollremoval)
label(recrerollremoval)
label(intrerollremoval)
label(wisrerollremoval)
label(lucrerollremoval)
label(hprerollremoval)
label(mprerollremoval)
label(sprerollremoval)
label(strrerollremovalr)
label(dexrerollremovalr)
label(recrerollremovalr)
label(intrerollremovalr)
label(wisrerollremovalr)
label(lucrerollremovalr)
label(hprerollremovalr)
label(mprerollremovalr)
label(sprerollremovalr)
label(strrerollremovalequality)
label(dexrerollremovalequality)
label(recrerollremovalequality)
label(intrerollremovalequality)
label(wisrerollremovalequality)
label(lucrerollremovalequality)
label(hprerollremovalequality)
label(mprerollremovalequality)
label(sprerollremovalequality)
label(removal)


newmem: //this is allocated memory, you have read,write,execute access
cmp [rune],4B // StdRune
je originalcode
cmp [rune],9B // StdRune
je originalcode
lea ebp,[esi+00000084]
mov [orangecount],eax
cmp [counter16],eax
JG originalcode
cmp [counter16],eax
JE equality
cmp [rune],(int)106
JE strreroll
cmp [rune],(int)107
JE dexreroll
cmp [rune],(int)108
JE recreroll
cmp [rune],(int)109
JE intreroll
cmp [rune],(int)110
JE wisreroll
cmp [rune],(int)111
JE lucreroll
cmp [rune],(int)112
JE hpcheck
cmp [rune],(int)113
JE mpcheck
cmp [rune],(int)114
JE spcheck
cmp [rune],(int)115
JE strrerollremoval
cmp [rune],(int)116
JE dexrerollremoval
cmp [rune],(int)117
JE recrerollremoval
cmp [rune],(int)118
JE intrerollremoval
cmp [rune],(int)119
JE wisrerollremoval
cmp [rune],(int)120
JE lucrerollremoval
cmp [rune],(int)121
JE hprerollremoval
cmp [rune],(int)122
JE mprerollremoval
cmp [rune],(int)123
JE sprerollremoval
//PerfectRunes
cmp [rune],(int)137
JE strreroll
cmp [rune],(int)138
JE dexreroll
cmp [rune],(int)139
JE recreroll
cmp [rune],(int)140
JE intreroll
cmp [rune],(int)141
JE wisreroll
cmp [rune],(int)142
JE lucreroll
cmp [rune],(int)143
JE hpcheck
cmp [rune],(int)144
JE mpcheck
cmp [rune],(int)145
JE spcheck
cmp [rune],(int)146

originalcode:
lea ebp,[esi+00000084]
jmp exit

equality:
cmp [rune],(int)106
JE strrerollequality
cmp [rune],(int)107
JE dexrerollequality
cmp [rune],(int)108
JE recrerollequality
cmp [rune],(int)109
JE intrerollequality
cmp [rune],(int)110
JE wisrerollequality
cmp [rune],(int)111
JE lucrerollequality
cmp [rune],(int)112
JE hprerollequality
cmp [rune],(int)113
JE mprerollequality
cmp [rune],(int)114
JE sprerollequality
cmp [rune],(int)115
JE strrerollremovalequality
cmp [rune],(int)116
JE dexrerollremovalequality
cmp [rune],(int)117
JE recrerollremovalequality
cmp [rune],(int)118
JE intrerollremovalequality
cmp [rune],(int)119
JE wisrerollremovalequality
cmp [rune],(int)120
JE lucrerollremovalequality
cmp [rune],(int)121
JE hprerollremovalequality
cmp [rune],(int)122
JE mprerollremovalequality
cmp [rune],(int)123
JE sprerollremovalequality
//PerfectRunes
cmp [rune],(int)137
JE strrerollequality
cmp [rune],(int)138
JE dexrerollequality
cmp [rune],(int)139
JE recrerollequality
cmp [rune],(int)140
JE intrerollequality
cmp [rune],(int)141
JE wisrerollequality
cmp [rune],(int)142
JE lucrerollequality
cmp [rune],(int)143
JE hprerollequality
cmp [rune],(int)144
JE mprerollequality
cmp [rune],(int)145
JE sprerollequality
cmp [rune],(int)146
jmp originalcode

hpcheck:
cmp dword ptr [itemname],(int)16001
JL 004D2C7B
cmp dword ptr [itemname],(int)22001
JL hpreroll
cmp dword ptr [itemname],(int)23255
JLE 004D2C7B
cmp dword ptr [itemname],(int)40001
JL hpreroll
cmp dword ptr [itemname],(int)69001
JL 004D2C7B
cmp dword ptr [itemname],(int)92255
JL hpreroll
jmp 004D2C7B

mpcheck:
cmp dword ptr [itemname],(int)16001
JL 004D2C7B
cmp dword ptr [itemname],(int)22001
JL mpreroll
cmp dword ptr [itemname],(int)23255
JLE 004D2C7B
cmp dword ptr [itemname],(int)40001
JL mpreroll
cmp dword ptr [itemname],(int)69001
JL 004D2C7B
cmp dword ptr [itemname],(int)92255
JL mpreroll
jmp 004D2C7B


spcheck:
cmp dword ptr [itemname],(int)16001
JL 004D2C7B
cmp dword ptr [itemname],(int)22001
JL spreroll
cmp dword ptr [itemname],(int)23255
JLE 004D2C7B
cmp dword ptr [itemname],(int)40001
JL spreroll
cmp dword ptr [itemname],(int)69001
JL 004D2C7B
cmp dword ptr [itemname],(int)92255
JL spreroll
jmp 004D2C7B

strrerollequality:
cmp [strpointer],1
JE strreroll
mov edi,0
jmp removal

dexrerollequality:
cmp [dexpointer],1
JE dexreroll
mov edi,1
jmp removal

recrerollequality:
cmp [recpointer],1
JE recreroll
mov edi,2
jmp removal

intrerollequality:
cmp [intpointer],1
JE intreroll
mov edi,3
jmp removal

wisrerollequality:
cmp [wispointer],1
JE wisreroll
mov edi,4
jmp removal

lucrerollequality:
cmp [lucpointer],1
JE lucreroll
mov edi,5
jmp removal

hprerollequality:
cmp [hppointer],1
JE hpcheck
mov edi,6
jmp removal

mprerollequality:
cmp [mppointer],1
JE mpcheck
mov edi,7
jmp removal

sprerollequality:
cmp [sppointer],1
JE spcheck
mov edi,8
jmp removal

strrerollremovalequality:
cmp [strpointer],1
JE strrerollremoval
mov edi,0
jmp removal

dexrerollremovalequality:
cmp [dexpointer],1
JE dexrerollremoval
mov edi,1
jmp removal

recrerollremovalequality:
cmp [recpointer],1
JE recrerollremoval
mov edi,2
jmp removal

intrerollremovalequality:
cmp [intpointer],1
JE intrerollremoval
mov edi,3
jmp removal

wisrerollremovalequality:
cmp [wispointer],1
JE wisrerollremoval
mov edi,4
jmp removal

lucrerollremovalequality:
cmp [lucpointer],1
JE lucrerollremoval
mov edi,5
jmp removal

hprerollremovalequality:
cmp [hppointer],1
JE hprerollremoval
mov edi,6
jmp removal

mprerollremovalequality:
cmp [mppointer],1
JE mprerollremoval
mov edi,7
jmp removal

sprerollremovalequality:
cmp [sppointer],1
JE sprerollremoval
mov edi,8
jmp removal

strreroll:
mov edi,0
jmp reroll

dexreroll:
mov edi,1
jmp reroll

recreroll:
mov edi,2
jmp reroll

intreroll:
mov edi,3
jmp reroll

wisreroll:
mov edi,4
jmp reroll

lucreroll:
mov edi,5
jmp reroll

hpreroll:
mov edi,6
jmp reroll

mpreroll:
mov edi,7
jmp reroll

spreroll:
mov edi,8
jmp reroll

strrerollremoval:
cmp [strpointer],0
JE removal
mov edi,0
jmp rerollremoval

dexrerollremoval:
cmp [dexpointer],0
JE removal
mov edi,1
jmp rerollremoval

recrerollremoval:
cmp [recpointer],0
JE removal
mov edi,2
jmp rerollremoval

intrerollremoval:
cmp [intpointer],0
JE removal
mov edi,3
jmp rerollremoval

wisrerollremoval:
cmp [wispointer],0
JE removal
mov edi,4
jmp rerollremoval

lucrerollremoval:
cmp [lucpointer],0
JE removal
mov edi,5
jmp rerollremoval

hprerollremoval:
cmp [hppointer],0
JE removal
mov edi,6
jmp rerollremoval

mprerollremoval:
cmp [mppointer],0
JE removal
mov edi,7
jmp rerollremoval

sprerollremoval:
cmp [sppointer],0
JE removal
mov edi,8
jmp rerollremoval


reroll:
//PerfectRunes
cmp [rune],(int)137
JE Perfect
cmp [rune],(int)138
JE Perfect
cmp [rune],(int)139
JE Perfect
cmp [rune],(int)140
JE Perfect
cmp [rune],(int)141
JE Perfect
cmp [rune],(int)142
JE Perfect
cmp [rune],(int)143
JE Perfect
cmp [rune],(int)144
JE Perfect
cmp [rune],(int)145
JE Perfect
JMP NotPerfect
Perfect:
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
mov bl,cl
jmp end
NotPerfect:

call 0051BD66
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
cdq
inc ecx
idiv ecx
mov bl,dl
call 0051BD66
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
inc ecx
cdq
idiv ecx
cmp bl,dl
jb gmcheck
mov bl,dl

gmcheck:
cmp dword ptr [esp+2C],00
jne end
call 0051BD66
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
inc ecx
cdq
idiv ecx
cmp bl,dl
jb end
mov bl,dl

end:
movzx dx,bl
cmp [rune],(int)106
JE strrerollr
cmp [rune],(int)107
JE dexrerollr
cmp [rune],(int)108
JE recrerollr
cmp [rune],(int)109
JE intrerollr
cmp [rune],(int)110
JE wisrerollr
cmp [rune],(int)111
JE lucrerollr
cmp [rune],(int)112
JE hprerollr
cmp [rune],(int)113
JE mprerollr
cmp [rune],(int)114
JE sprerollr
//PerfectRunes
cmp [rune],(int)137
JE strrerollrPerf
cmp [rune],(int)138
JE dexrerollrPerf
cmp [rune],(int)139
JE recrerollrPerf
cmp [rune],(int)140
JE intrerollrPerf
cmp [rune],(int)141
JE wisrerollrPerf
cmp [rune],(int)142
JE lucrerollrPerf
cmp [rune],(int)143
JE hprerollrPerf
cmp [rune],(int)144
JE mprerollrPerf
cmp [rune],(int)145
JE sprerollrPerf

backend:
movzx eax,bl
cdq
mov ecx,0000000A
idiv ecx
movzx ecx,word ptr [edi*2+00581C74]
add al,30
mov [ecx+esi+4C],al
movzx eax,word ptr [edi*2+00581C74]
add dl,30
mov [eax+esi+4D],dl
Jmp 004D2C7B

strrerollr:
mov [ebp+00],dx
Jmp backend
dexrerollr:
mov [ebp+02],dx
Jmp backend
recrerollr:
mov [ebp+04],dx
Jmp backend
intrerollr:
mov [ebp+06],dx
Jmp backend
wisrerollr:
mov [ebp+08],dx
Jmp backend
lucrerollr:
mov [ebp+0A],dx
Jmp backend
hprerollr:
mov [ebp+0C],dx
Jmp backend
mprerollr:
mov [ebp+0E],dx
Jmp backend
sprerollr:
mov [ebp+10],dx
Jmp backend

//PerfectRunes
strrerollrPerf:
mov [ebp+00],dx
Jmp backend
dexrerollrPerf:
mov [ebp+02],dx
Jmp backend
recrerollrPerf:
mov [ebp+04],dx
Jmp backend
intrerollrPerf:
mov [ebp+06],dx
Jmp backend
wisrerollrPerf:
mov [ebp+08],dx
Jmp backend
lucrerollrPerf:
mov [ebp+0A],dx
Jmp backend
hprerollrPerf:
mov [ebp+0C],dx
Jmp backend
mprerollrPerf:
mov [ebp+0E],dx
Jmp backend
sprerollrPerf:
mov [ebp+10],dx
Jmp backend

rerollremoval:
mov word ptr [ebp+00],0000
movzx edx,word ptr [edi*2+00581C74]
mov byte ptr [edx+esi+4C],30
movzx eax,word ptr [edi*2+00581C74]
mov byte ptr [eax+esi+4D],30
cmp [rune],(int)115
JE strrerollremovalr
cmp [rune],(int)116
JE dexrerollremovalr
cmp [rune],(int)117
JE recrerollremovalr
cmp [rune],(int)118
JE intrerollremovalr
cmp [rune],(int)119
JE wisrerollremovalr
cmp [rune],(int)120
JE lucrerollremovalr
cmp [rune],(int)121
JE hprerollremovalr
cmp [rune],(int)122
JE mprerollremovalr
cmp [rune],(int)123
JE sprerollremovalr
Jmp 004D2C7B

strrerollremovalr:
mov byte ptr [esi+84],0
Jmp 004D2C7B

dexrerollremovalr:
mov byte ptr [esi+86],0
Jmp 004D2C7B

recrerollremovalr:
mov byte ptr [esi+88],0
Jmp 004D2C7B

intrerollremovalr:
mov byte ptr [esi+8a],0
Jmp 004D2C7B

wisrerollremovalr:
mov byte ptr [esi+8c],0
Jmp 004D2C7B

lucrerollremovalr:
mov byte ptr [esi+8e],0
Jmp 004D2C7B

hprerollremovalr:
mov byte ptr [esi+90],0
Jmp 004D2C7B

mprerollremovalr:
mov byte ptr [esi+92],0
Jmp 004D2C7B

sprerollremovalr:
mov byte ptr [esi+94],0
Jmp 004D2C7B

removal:
jmp 004D2C7B

exit:
jmp returnhere

"ps_game.exe"+D2BC7:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+D2BC7:
lea ebp,[esi+00000084]
//Alt: db 8D AE 84 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>47</ID>
      <Description>"Stat removal "</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
registersymbol(rune)
registersymbol(gecici)
registersymbol(itemname)
registersymbol(counter16)
registersymbol(strpointer)
registersymbol(dexpointer)
registersymbol(recpointer)
registersymbol(intpointer)
registersymbol(wispointer)
registersymbol(lucpointer)
registersymbol(hppointer)
registersymbol(mppointer)
registersymbol(sppointer)
alloc(counter16,4)
alloc(gecici,4)
alloc(itemname,4)
alloc(strpointer,4)
alloc(dexpointer,4)
alloc(recpointer,4)
alloc(intpointer,4)
alloc(wispointer,4)
alloc(lucpointer,4)
alloc(hppointer,4)
alloc(mppointer,4)
alloc(sppointer,4)
alloc(rune,4)
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(dexxx)
label(reccc)
label(inttt)
label(wisss)
label(luccc)
label(hppp)
label(mppp)
label(sppp)
label(removalrune)

newmem: //this is allocated memory, you have read,write,execute access
mov esi,[ebp+30]
mov esi,[esi]
mov [itemname],esi
mov esi,0
mov [strpointer],0
mov [dexpointer],0
mov [recpointer],0
mov [intpointer],0
mov [wispointer],0
mov [lucpointer],0
mov [hppointer],0
mov [sppointer],0
mov [mppointer],0
mov [counter16],0
cmp byte ptr [ebp+84],00
JE dexxx
add [counter16],1
mov [strpointer],1

dexxx:
cmp byte ptr [ebp+86],00
JE reccc
add [counter16],1
mov [dexpointer],1

reccc:
cmp byte ptr [ebp+88],00
JE inttt
add [counter16],1
mov [recpointer],1

inttt:
cmp byte ptr [ebp+8A],00
JE wisss
add [counter16],1
mov [intpointer],1

wisss:
cmp byte ptr [ebp+8C],00
JE luccc
add [counter16],1
mov [wispointer],1

luccc:
cmp byte ptr [ebp+8E],00
JE hppp
add [counter16],1
mov [lucpointer],1

hppp:
cmp byte ptr [ebp+90],00
JE mppp
add [counter16],1
mov [hppointer],1

mppp:
cmp byte ptr [ebp+92],00
JE sppp
add [counter16],1
mov [mppointer],1

sppp:
cmp byte ptr [ebp+94],00
JE originalcode
add [counter16],1
mov [sppointer],1


originalcode:
mov dl,[ecx]
mov [rune],dl

//Check
cmp [rune], (int)75 //StdRune
je removalrune
cmp [rune], (int)155 //StdRune
je removalrune
cmp [rune], (int)106 //Str
je CheckStrRune
CheckDexPointer:
cmp [rune], (int)107 //Dex
je CheckDexRune
CheckRecPointer:
cmp [rune], (int)108 // Rec
je CheckRecRune
CheckIntPointer:
cmp [rune], (int)109 // Int
je CheckIntRune
CheckWisPointer:
cmp [rune], (int)110 // Wis
je CheckWisRune
CheckLucPointer:
cmp [rune], (int)111 // Luc
je CheckLucRune
CheckHPPointer:
cmp [rune], (int)112 // HP
je CheckHPRune
CheckMPPointer:
cmp [rune], (int)113 // MP
je CheckMPRune
CheckSPPointer:
cmp [rune], (int)114 //SP
je CheckSPRune
SPPointerLast:
cmp [rune],(int)115
JE removalrune
cmp [rune],(int)116
JE removalrune
cmp [rune],(int)117
JE removalrune
cmp [rune],(int)118
JE removalrune
cmp [rune],(int)119
JE removalrune
cmp [rune],(int)120
JE removalrune
cmp [rune],(int)121
JE removalrune
cmp [rune],(int)122
JE removalrune
cmp [rune],(int)123
JE removalrune
// Perfect Runes
cmp [rune], (int)137 //Str
je CheckStrRunePerf
CheckDexPointerPerf:
cmp [rune], (int)138 //Dex
je CheckDexRunePerf
CheckRecPointerPerf:
cmp [rune], (int)139 // Rec
je CheckRecRunePerf
CheckIntPointerPerf:
cmp [rune], (int)140 // Int
je CheckIntRunePerf
CheckWisPointerPerf:
cmp [rune], (int)141 // Wis
je CheckWisRunePerf
CheckLucPointerPerf:
cmp [rune], (int)142 // Luc
je CheckLucRunePerf
CheckHPPointerPerf:
cmp [rune], (int)143 // HP
je CheckHPRunePerf
CheckMPPointerPerf:
cmp [rune], (int)144 // MP
je CheckMPRunePerf
CheckSPPointerPerf:
cmp [rune], (int)145 //SP
je CheckSPRunePerf
SPPointerLastPerf:
jmp ps_game.exe+6D901
removalrune:
cmp byte ptr [ecx+46],3E
jne ps_game.exe+6D901

exit:
jmp returnhere

CheckStrRune:
cmp [strpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckDexPointer
CheckDexRune:
cmp [dexpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckRecPointer
CheckRecRune:
cmp [recpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckIntPointer
CheckIntRune:
cmp [intpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckWisPointer
CheckWisRune:
cmp [wispointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckLucPointer
CheckLucRune:
cmp [lucpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckHPPointer
CheckHPRune:
cmp [hppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckMPPointer
CheckMPRune:
cmp [mppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckSPPointer
CheckSPRune:
cmp [sppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp SPPointerLast
// PerfectRunes
CheckStrRunePerf:
cmp [strpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckDexPointerPerf
CheckDexRunePerf:
cmp [dexpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckRecPointerPerf
CheckRecRunePerf:
cmp [recpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckIntPointerPerf
CheckIntRunePerf:
cmp [intpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckWisPointerPerf
CheckWisRunePerf:
cmp [wispointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckLucPointerPerf
CheckLucRunePerf:
cmp [lucpointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckHPPointerPerf
CheckHPRunePerf:
cmp [hppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckMPPointerPerf
CheckMPRunePerf:
cmp [mppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp CheckSPPointerPerf
CheckSPRunePerf:
cmp [sppointer], 1
je exit
push eax
mov eax,[ebp+30]
movzx eax,byte ptr [eax+4A]
cmp [counter16],eax
pop eax
jl exit
jmp SPPointerLastPerf

"ps_game.exe"+6D6A9:
jmp newmem
nop
nop
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6D6A9:
cmp byte ptr [ecx+46],3E
jne ps_game.exe+6D901
//Alt: db 80 79 46 3E 0F 85 4E 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>48</ID>
      <Description>"Stat rec Rune"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
registersymbol(ecxpointer)
registersymbol(orangecount)
alloc(orangecount,4)
alloc(ecxpointer,4)
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(equality)
label(reroll)
label(gmcheck)
label(end)
label(backend)
label(hpcheck)
label(mpcheck)
label(spcheck)
label(strreroll)
label(dexreroll)
label(recreroll)
label(intreroll)
label(wisreroll)
label(lucreroll)
label(hpreroll)
label(mpreroll)
label(spreroll)
label(strrerollr)
label(dexrerollr)
label(recrerollr)
label(intrerollr)
label(wisrerollr)
label(lucrerollr)
label(hprerollr)
label(mprerollr)
label(sprerollr)
label(strrerollequality)
label(dexrerollequality)
label(recrerollequality)
label(intrerollequality)
label(wisrerollequality)
label(lucrerollequality)
label(hprerollequality)
label(mprerollequality)
label(sprerollequality)
label(rerollremoval)
label(strrerollremoval)
label(dexrerollremoval)
label(recrerollremoval)
label(intrerollremoval)
label(wisrerollremoval)
label(lucrerollremoval)
label(hprerollremoval)
label(mprerollremoval)
label(sprerollremoval)
label(strrerollremovalr)
label(dexrerollremovalr)
label(recrerollremovalr)
label(intrerollremovalr)
label(wisrerollremovalr)
label(lucrerollremovalr)
label(hprerollremovalr)
label(mprerollremovalr)
label(sprerollremovalr)
label(strrerollremovalequality)
label(dexrerollremovalequality)
label(recrerollremovalequality)
label(intrerollremovalequality)
label(wisrerollremovalequality)
label(lucrerollremovalequality)
label(hprerollremovalequality)
label(mprerollremovalequality)
label(sprerollremovalequality)
label(removal)


newmem: //this is allocated memory, you have read,write,execute access
cmp [rune],4B // StdRune
je originalcode
cmp [rune],9B // StdRune
je originalcode
lea ebp,[esi+00000084]
mov [orangecount],eax
cmp [counter16],eax
JG originalcode
cmp [counter16],eax
JE equality
cmp [rune],(int)106
JE strreroll
cmp [rune],(int)107
JE dexreroll
cmp [rune],(int)108
JE recreroll
cmp [rune],(int)109
JE intreroll
cmp [rune],(int)110
JE wisreroll
cmp [rune],(int)111
JE lucreroll
cmp [rune],(int)112
JE hpcheck
cmp [rune],(int)113
JE mpcheck
cmp [rune],(int)114
JE spcheck
cmp [rune],(int)115
JE strrerollremoval
cmp [rune],(int)116
JE dexrerollremoval
cmp [rune],(int)117
JE recrerollremoval
cmp [rune],(int)118
JE intrerollremoval
cmp [rune],(int)119
JE wisrerollremoval
cmp [rune],(int)120
JE lucrerollremoval
cmp [rune],(int)121
JE hprerollremoval
cmp [rune],(int)122
JE mprerollremoval
cmp [rune],(int)123
JE sprerollremoval
//PerfectRunes
cmp [rune],(int)137
JE strreroll
cmp [rune],(int)138
JE dexreroll
cmp [rune],(int)139
JE recreroll
cmp [rune],(int)140
JE intreroll
cmp [rune],(int)141
JE wisreroll
cmp [rune],(int)142
JE lucreroll
cmp [rune],(int)143
JE hpcheck
cmp [rune],(int)144
JE mpcheck
cmp [rune],(int)145
JE spcheck
cmp [rune],(int)146

originalcode:
lea ebp,[esi+00000084]
jmp exit

equality:
cmp [rune],(int)106
JE strrerollequality
cmp [rune],(int)107
JE dexrerollequality
cmp [rune],(int)108
JE recrerollequality
cmp [rune],(int)109
JE intrerollequality
cmp [rune],(int)110
JE wisrerollequality
cmp [rune],(int)111
JE lucrerollequality
cmp [rune],(int)112
JE hprerollequality
cmp [rune],(int)113
JE mprerollequality
cmp [rune],(int)114
JE sprerollequality
cmp [rune],(int)115
JE strrerollremovalequality
cmp [rune],(int)116
JE dexrerollremovalequality
cmp [rune],(int)117
JE recrerollremovalequality
cmp [rune],(int)118
JE intrerollremovalequality
cmp [rune],(int)119
JE wisrerollremovalequality
cmp [rune],(int)120
JE lucrerollremovalequality
cmp [rune],(int)121
JE hprerollremovalequality
cmp [rune],(int)122
JE mprerollremovalequality
cmp [rune],(int)123
JE sprerollremovalequality
//PerfectRunes
cmp [rune],(int)137
JE strrerollequality
cmp [rune],(int)138
JE dexrerollequality
cmp [rune],(int)139
JE recrerollequality
cmp [rune],(int)140
JE intrerollequality
cmp [rune],(int)141
JE wisrerollequality
cmp [rune],(int)142
JE lucrerollequality
cmp [rune],(int)143
JE hprerollequality
cmp [rune],(int)144
JE mprerollequality
cmp [rune],(int)145
JE sprerollequality
cmp [rune],(int)146
jmp originalcode

hpcheck:
cmp dword ptr [itemname],(int)16001
JL 004D2C7B
cmp dword ptr [itemname],(int)22001
JL hpreroll
cmp dword ptr [itemname],(int)23255
JLE 004D2C7B
cmp dword ptr [itemname],(int)40001
JL hpreroll
cmp dword ptr [itemname],(int)69001
JL 004D2C7B
cmp dword ptr [itemname],(int)92255
JL hpreroll
jmp 004D2C7B

mpcheck:
cmp dword ptr [itemname],(int)16001
JL 004D2C7B
cmp dword ptr [itemname],(int)22001
JL mpreroll
cmp dword ptr [itemname],(int)23255
JLE 004D2C7B
cmp dword ptr [itemname],(int)40001
JL mpreroll
cmp dword ptr [itemname],(int)69001
JL 004D2C7B
cmp dword ptr [itemname],(int)92255
JL mpreroll
jmp 004D2C7B


spcheck:
cmp dword ptr [itemname],(int)16001
JL 004D2C7B
cmp dword ptr [itemname],(int)22001
JL spreroll
cmp dword ptr [itemname],(int)23255
JLE 004D2C7B
cmp dword ptr [itemname],(int)40001
JL spreroll
cmp dword ptr [itemname],(int)69001
JL 004D2C7B
cmp dword ptr [itemname],(int)92255
JL spreroll
jmp 004D2C7B

strrerollequality:
cmp [strpointer],1
JE strreroll
mov edi,0
jmp removal

dexrerollequality:
cmp [dexpointer],1
JE dexreroll
mov edi,1
jmp removal

recrerollequality:
cmp [recpointer],1
JE recreroll
mov edi,2
jmp removal

intrerollequality:
cmp [intpointer],1
JE intreroll
mov edi,3
jmp removal

wisrerollequality:
cmp [wispointer],1
JE wisreroll
mov edi,4
jmp removal

lucrerollequality:
cmp [lucpointer],1
JE lucreroll
mov edi,5
jmp removal

hprerollequality:
cmp [hppointer],1
JE hpcheck
mov edi,6
jmp removal

mprerollequality:
cmp [mppointer],1
JE mpcheck
mov edi,7
jmp removal

sprerollequality:
cmp [sppointer],1
JE spcheck
mov edi,8
jmp removal

strrerollremovalequality:
cmp [strpointer],1
JE strrerollremoval
mov edi,0
jmp removal

dexrerollremovalequality:
cmp [dexpointer],1
JE dexrerollremoval
mov edi,1
jmp removal

recrerollremovalequality:
cmp [recpointer],1
JE recrerollremoval
mov edi,2
jmp removal

intrerollremovalequality:
cmp [intpointer],1
JE intrerollremoval
mov edi,3
jmp removal

wisrerollremovalequality:
cmp [wispointer],1
JE wisrerollremoval
mov edi,4
jmp removal

lucrerollremovalequality:
cmp [lucpointer],1
JE lucrerollremoval
mov edi,5
jmp removal

hprerollremovalequality:
cmp [hppointer],1
JE hprerollremoval
mov edi,6
jmp removal

mprerollremovalequality:
cmp [mppointer],1
JE mprerollremoval
mov edi,7
jmp removal

sprerollremovalequality:
cmp [sppointer],1
JE sprerollremoval
mov edi,8
jmp removal

strreroll:
mov edi,0
jmp reroll

dexreroll:
mov edi,1
jmp reroll

recreroll:
mov edi,2
jmp reroll

intreroll:
mov edi,3
jmp reroll

wisreroll:
mov edi,4
jmp reroll

lucreroll:
mov edi,5
jmp reroll

hpreroll:
mov edi,6
jmp reroll

mpreroll:
mov edi,7
jmp reroll

spreroll:
mov edi,8
jmp reroll

strrerollremoval:
cmp [strpointer],0
JE removal
mov edi,0
jmp rerollremoval

dexrerollremoval:
cmp [dexpointer],0
JE removal
mov edi,1
jmp rerollremoval

recrerollremoval:
cmp [recpointer],0
JE removal
mov edi,2
jmp rerollremoval

intrerollremoval:
cmp [intpointer],0
JE removal
mov edi,3
jmp rerollremoval

wisrerollremoval:
cmp [wispointer],0
JE removal
mov edi,4
jmp rerollremoval

lucrerollremoval:
cmp [lucpointer],0
JE removal
mov edi,5
jmp rerollremoval

hprerollremoval:
cmp [hppointer],0
JE removal
mov edi,6
jmp rerollremoval

mprerollremoval:
cmp [mppointer],0
JE removal
mov edi,7
jmp rerollremoval

sprerollremoval:
cmp [sppointer],0
JE removal
mov edi,8
jmp rerollremoval


reroll:
//PerfectRunes
cmp [rune],(int)137
JE Perfect
cmp [rune],(int)138
JE Perfect
cmp [rune],(int)139
JE Perfect
cmp [rune],(int)140
JE Perfect
cmp [rune],(int)141
JE Perfect
cmp [rune],(int)142
JE Perfect
cmp [rune],(int)143
JE Perfect
cmp [rune],(int)144
JE Perfect
cmp [rune],(int)145
JE Perfect
JMP NotPerfect
Perfect:
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
mov bl,cl
jmp end
NotPerfect:

call 0051BD66
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
cdq
inc ecx
idiv ecx
mov bl,dl
call 0051BD66
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
inc ecx
cdq
idiv ecx
cmp bl,dl
jb gmcheck
mov bl,dl

gmcheck:
cmp dword ptr [esp+2C],00
jne end
call 0051BD66
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
inc ecx
cdq
idiv ecx
cmp bl,dl
jb end
mov bl,dl

end:
movzx dx,bl
cmp [rune],(int)106
JE strrerollr
cmp [rune],(int)107
JE dexrerollr
cmp [rune],(int)108
JE recrerollr
cmp [rune],(int)109
JE intrerollr
cmp [rune],(int)110
JE wisrerollr
cmp [rune],(int)111
JE lucrerollr
cmp [rune],(int)112
JE hprerollr
cmp [rune],(int)113
JE mprerollr
cmp [rune],(int)114
JE sprerollr
//PerfectRunes
cmp [rune],(int)137
JE strrerollrPerf
cmp [rune],(int)138
JE dexrerollrPerf
cmp [rune],(int)139
JE recrerollrPerf
cmp [rune],(int)140
JE intrerollrPerf
cmp [rune],(int)141
JE wisrerollrPerf
cmp [rune],(int)142
JE lucrerollrPerf
cmp [rune],(int)143
JE hprerollrPerf
cmp [rune],(int)144
JE mprerollrPerf
cmp [rune],(int)145
JE sprerollrPerf

backend:
movzx eax,bl
cdq
mov ecx,0000000A
idiv ecx
movzx ecx,word ptr [edi*2+00581C74]
add al,30
mov [ecx+esi+4C],al
movzx eax,word ptr [edi*2+00581C74]
add dl,30
mov [eax+esi+4D],dl
Jmp 004D2C7B

strrerollr:
mov [ebp+00],dx
Jmp backend
dexrerollr:
mov [ebp+02],dx
Jmp backend
recrerollr:
mov [ebp+04],dx
Jmp backend
intrerollr:
mov [ebp+06],dx
Jmp backend
wisrerollr:
mov [ebp+08],dx
Jmp backend
lucrerollr:
mov [ebp+0A],dx
Jmp backend
hprerollr:
mov [ebp+0C],dx
Jmp backend
mprerollr:
mov [ebp+0E],dx
Jmp backend
sprerollr:
mov [ebp+10],dx
Jmp backend

//PerfectRunes
strrerollrPerf:
mov [ebp+00],dx
Jmp backend
dexrerollrPerf:
mov [ebp+02],dx
Jmp backend
recrerollrPerf:
mov [ebp+04],dx
Jmp backend
intrerollrPerf:
mov [ebp+06],dx
Jmp backend
wisrerollrPerf:
mov [ebp+08],dx
Jmp backend
lucrerollrPerf:
mov [ebp+0A],dx
Jmp backend
hprerollrPerf:
mov [ebp+0C],dx
Jmp backend
mprerollrPerf:
mov [ebp+0E],dx
Jmp backend
sprerollrPerf:
mov [ebp+10],dx
Jmp backend

rerollremoval:
mov word ptr [ebp+00],0000
movzx edx,word ptr [edi*2+00581C74]
mov byte ptr [edx+esi+4C],30
movzx eax,word ptr [edi*2+00581C74]
mov byte ptr [eax+esi+4D],30
cmp [rune],(int)115
JE strrerollremovalr
cmp [rune],(int)116
JE dexrerollremovalr
cmp [rune],(int)117
JE recrerollremovalr
cmp [rune],(int)118
JE intrerollremovalr
cmp [rune],(int)119
JE wisrerollremovalr
cmp [rune],(int)120
JE lucrerollremovalr
cmp [rune],(int)121
JE hprerollremovalr
cmp [rune],(int)122
JE mprerollremovalr
cmp [rune],(int)123
JE sprerollremovalr
Jmp 004D2C7B

strrerollremovalr:
mov byte ptr [esi+84],0
Jmp 004D2C7B

dexrerollremovalr:
mov byte ptr [esi+86],0
Jmp 004D2C7B

recrerollremovalr:
mov byte ptr [esi+88],0
Jmp 004D2C7B

intrerollremovalr:
mov byte ptr [esi+8a],0
Jmp 004D2C7B

wisrerollremovalr:
mov byte ptr [esi+8c],0
Jmp 004D2C7B

lucrerollremovalr:
mov byte ptr [esi+8e],0
Jmp 004D2C7B

hprerollremovalr:
mov byte ptr [esi+90],0
Jmp 004D2C7B

mprerollremovalr:
mov byte ptr [esi+92],0
Jmp 004D2C7B

sprerollremovalr:
mov byte ptr [esi+94],0
Jmp 004D2C7B

removal:
jmp 004D2C7B

exit:
jmp returnhere

"ps_game.exe"+D2BC7:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+D2BC7:
lea ebp,[esi+00000084]
//Alt: db 8D AE 84 00 00 00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of jle ps_game.exe+6E73D</Description>
      <Address>0046E736</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>6E736</ModuleNameOffset>
      <Before>
        <Byte>58</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>FE</Byte>
        <Byte>32</Byte>
      </Before>
      <Actual>
        <Byte>7E</Byte>
        <Byte>05</Byte>
      </Actual>
      <After>
        <Byte>BE</Byte>
        <Byte>32</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp esi,32</Description>
      <Address>0046E733</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>6E733</ModuleNameOffset>
      <Before>
        <Byte>35</Byte>
        <Byte>B8</Byte>
        <Byte>79</Byte>
        <Byte>58</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>FE</Byte>
        <Byte>32</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>BE</Byte>
        <Byte>64</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jae ps_game.exe+6D11C</Description>
      <Address>0046CD7D</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>6CD7D</ModuleNameOffset>
      <Before>
        <Byte>6C</Byte>
        <Byte>24</Byte>
        <Byte>44</Byte>
        <Byte>3B</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>83</Byte>
        <Byte>99</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>14</Byte>
        <Byte>55</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je ps_game.exe+BB47A</Description>
      <Address>004BAFD4</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>BAFD4</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp eax,10</Description>
      <Address>004BAFC8</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>BAFC8</ModuleNameOffset>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne ps_game.exe+7E0DA</Description>
      <Address>0047D9B6</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>7D9B6</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>2D</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>1E</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>B8</Byte>
        <Byte>8C</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je ps_game.exe+72E8C</Description>
      <Address>00472E2A</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>72E2A</ModuleNameOffset>
      <Before>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>1A</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>60</Byte>
      </Actual>
      <After>
        <Byte>8A</Byte>
        <Byte>43</Byte>
        <Byte>40</Byte>
        <Byte>3C</Byte>
        <Byte>1B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call ps_game.exe+F3AB0</Description>
      <Address>004F3DD0</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>F3DD0</ModuleNameOffset>
      <Before>
        <Byte>B9</Byte>
        <Byte>24</Byte>
        <Byte>37</Byte>
        <Byte>58</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>DB</Byte>
        <Byte>FC</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>1B</Byte>
        <Byte>83</Byte>
        <Byte>FF</Byte>
        <Byte>7E</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jmp ps_game.exe+91496</Description>
      <Address>00491444</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>91444</ModuleNameOffset>
      <Before>
        <Byte>09</Byte>
        <Byte>8D</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>B8</Byte>
        <Byte>1D</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne ps_game.exe+9DC71</Description>
      <Address>0049DB47</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>9DB47</ModuleNameOffset>
      <Before>
        <Byte>9F</Byte>
        <Byte>7C</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>24</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>39</Byte>
        <Byte>B7</Byte>
        <Byte>80</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of ja ps_game.exe+9DC71</Description>
      <Address>0049DB53</Address>
      <ModuleName>ps_game.exe</ModuleName>
      <ModuleNameOffset>9DB53</ModuleNameOffset>
      <Before>
        <Byte>B7</Byte>
        <Byte>80</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>87</Byte>
        <Byte>18</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>87</Byte>
        <Byte>F4</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :lock xadd [ecx],eax</Description>
      <Address>7586BB68</Address>
      <ModuleName>kernel32.dll</ModuleName>
      <ModuleNameOffset>4BB68</ModuleNameOffset>
      <Before>
        <Byte>04</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F0</Byte>
        <Byte>0F</Byte>
        <Byte>C1</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>08</Byte>
        <Byte>00</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
